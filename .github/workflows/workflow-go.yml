name: "Go"

on:
  workflow_dispatch:
  workflow_call:


# TODO: Complete these
# GoLang steps:
# ✅       cachePrime,
# ✅       cacheRestore,
# ✅       ciDep,
# ✅       ciTest,
# ✅       slackUnitTests,
# ✅       compile,
# ✅       cacheRebuild,
# ✅       dockerBuild,
# ✅       slackBuild,
# ❌       deployKubernetes,
# ❌       deployHelm,
# ❌       slackDeploy,

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  # The "build" workflow
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Setup Go
      # TODO: Ensure that this caches the .gomod and .gocache folders
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.18' # The Go version to download (if necessary) and use.
#          check-latest: true
          cache: true
#          cache-dependency-path: subdir/go.sum # optional

      # Perform a keyscan of 'bitbucket.org' and register the output for the SSH key step below
      - name: BitBucket Keyscan
        id: scan
        run: echo "::set-output name=known_hosts::$(ssh-keyscan -t rsa bitbucket.org)"


      # Install an SSH key for BitBucket authentication
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.BITBUCKET_SSH_KEY }}
          name: id_rsa # optional
          known_hosts: ${{ steps.scan.outputs.known_hosts }}
#          config: ${{ secrets.CONFIG }} # ssh_config; optional
          if_key_exists: replace # replace / ignore / fail; optional (defaults to fail)

      # Issue an HTTPS -> Git overrride for BitBucket repositories
      - name: Git Config
        run: |
          git config --global url."git@bitbucket.org:".insteadOf "https://bitbucket.org"          

      # Install all the dependencies
      - name: Install dependencies
        env:
          GOPRIVATE: bitbucket.org
        run: |
          go version
          go get -u golang.org/x/lint/golint

      # Debug repo name
      - name: Debug
        run: |
          env | grep -i GITHUB

      # Run build of the application
      - name: Run build
        env:
          GOPRIVATE: bitbucket.org
        run: |
          cd ./cmd/*/
          go build -tags development -ldflags="-s -w" -v

# TODO: Change this to CD to a valid directory, ensure it will not cause widespread breaks
#      # Run vet & lint on the code
#      - name: Run vet & lint
#        run: |
#          go vet .
#          golint .

      # Test code expects to access mongo @ `mongo` per previous build system
      - name: Mongo Hostname
        run:
          sudo echo "127.0.0.1 mongo" | sudo tee -a /etc/hosts

      # Start a Mongo DB server for testing
      - name: Start MongoDB
        uses: supercharge/mongodb-github-action@1.7.0
        with:
          mongodb-version: '4.4'

      # Run testing on the code
      - name: Run testing
        run: go test -vet=off -tags internal -v ./...

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to ACR
        uses: docker/login-action@v2
        with:
          registry: linced.azurecr.io
          username: ${{ secrets.AZURE_ACR_LINCED_USERNAME }}
          password: ${{ secrets.AZURE_ACR_LINCED_PASSWORD }}

      - name: Build and export to Docker
        uses: docker/build-push-action@v3
        with:
          context: .
          load: true
          push: false
          tags: ${{ env.GITHUB_RUN_NUMBER }}
          file: Dockerfile.drone

  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}
    needs: [build]
    steps:
      - name: Configure Kubectl
        uses: azure/setup-kubectl@v2.0
#        with:
#          version: '<version>' # default is latest stable


      - name: "Kubernetes Auth Dev"
        if: ${{ github.ref }} != 'refs/heads/production'
        run: |
          kubectl config set-credentials default --token=${{ env.DEVELOPMENT_AU_EAST_AKS_TOKEN }}
          # If cert provided...
          # kubectl config set-cluster default --server=${{ env.DEVELOPMENT_AU_EAST_AKS_SERVER }} --certificate-authority=ca.crt
          # If cert not provided
          kubectl config set-cluster default --server=${{ env.DEVELOPMENT_AU_EAST_AKS_SERVER }} --insecure-skip-tls-verify=true
          kubectl config set-context default --cluster=default --user=default
          kubectl config use-context default

      - name: "Kubernetes Auth Prod"
        if: ${{ github.ref }} == 'refs/heads/production'
        run: |
          kubectl config set-credentials default --token=${{ env.DEVELOPMENT_AU_EAST_AKS_TOKEN }}
          # If cert provided...
          # kubectl config set-cluster default --server=${{ env.DEVELOPMENT_AU_EAST_AKS_SERVER }} --certificate-authority=ca.crt
          # If cert not provided
          kubectl config set-cluster default --server=${{ env.DEVELOPMENT_AU_EAST_AKS_SERVER }} --insecure-skip-tls-verify=true
          kubectl config set-context default --cluster=default --user=default
          kubectl config use-context default

      - run: kubectl version

      - name: "Kubernetes Deploy"
        run: |
          echo "Deploying"
          # kubectl version
          #IFS=',' read -r -a DEPLOYMENTS <<< "${PLUGIN_DEPLOYMENT}"
          #IFS=',' read -r -a CONTAINERS <<< "${PLUGIN_CONTAINER}"
          #for DEPLOY in ${DEPLOYMENTS[@]}; do
          #  echo Deploying to $KUBERNETES_SERVER
          #  for CONTAINER in ${CONTAINERS[@]}; do
          #    if [[ ${PLUGIN_FORCE} == "true" ]]; then
          #      kubectl -n ${PLUGIN_NAMESPACE} set image deployment/${DEPLOY} \
          #        ${CONTAINER}=${PLUGIN_REPO}:${PLUGIN_TAG}FORCE
          #    fi
          #    kubectl -n ${PLUGIN_NAMESPACE} set image deployment/${DEPLOY} \
          #      ${CONTAINER}=${PLUGIN_REPO}:${PLUGIN_TAG} --record
          #  done
          #done

#      - name: "Deploy to Kubernetes"
#        uses: firehed/deploy-to-kubernetes-action@v0.3.0
#        with:
#          namespace: github-actions
#          deployment: www
#          container: server
#          image: my/image:${{ github.sha }}
#          token: ${{ secrets.GITHUB_TOKEN }}


#      - name: Post to a Slack channel
#        if: always()
#        id: slack
#        uses: slackapi/slack-github-action@v1.19.0
#        with:
#          # Slack channel id, channel name, or user id to post message.
#          # See also: https://api.slack.com/methods/chat.postMessage#channels
#          channel-id: 'G3184HDT6'
#          # For posting a rich message using Block Kit
#          payload: |
#            {
#              "text": "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}",
#              "blocks": [
#                {
#                  "type": "section",
#                  "text": {
#                    "type": "mrkdwn",
#                    "text": "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
#                  }
#                }
#              ]
#            }
#        env:
#          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
#          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK