name: "PHP"

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      DEPLOYMENT:
        description: "The name of the Kubernetes deployment to deploy to, ex: app-app-deployment"
        type: string
        required: true
      CONTAINER:
        description: "The name of the container within the Kubernetes deployment to patch, ex: app-app-deployment -c app-app"
        type: string
        required: true

env:
  CONTAINER_REGISTRY: linced.azurecr.io/linc-ed

jobs:
  build:
    name: "Build"
    runs-on: ubuntu-latest
    outputs:
      image_tag_build: ${{ steps.tag.outputs.image_tag_build }}
      image_tag_branch: ${{ steps.tag.outputs.image_tag_branch }}
    strategy:
      fail-fast: true
      matrix:
        container: ["php", "nginx"]
    steps:

      - name: "Debug Matrix"
        run: | 
          echo -e "Current matrix container:\n${{matrix.container}}

      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Login to ACR"
        uses: docker/login-action@v2
        with:
          registry: linced.azurecr.io
          username: ${{ secrets.AZURE_ACR_LINCED_USERNAME }}
          password: ${{ secrets.AZURE_ACR_LINCED_PASSWORD }}

      - name: "Set up Docker Buildx"
        if: contains(fromJson('["testing", "development", "staging", "production"]'), github.ref_name)
        uses: docker/setup-buildx-action@v2

      - name: "Export build tag"
        if: contains(fromJson('["testing", "development", "staging", "production"]'), github.ref_name)
        id: tag
        env:
          BUILD: ${{ github.run_number }}
        run: |
          echo "::set-output name=build_num::$(($BUILD+10000))"
          echo "::set-output name=image_tag_build::${{env.CONTAINER_REGISTRY}}/${{ github.event.repository.name }}:$(($BUILD+10000))"
          echo "::set-output name=image_tag_branch::${{env.CONTAINER_REGISTRY}}/${{ github.event.repository.name }}:${{github.ref_name}}"

      - name: "Build and export to Docker"
        uses: docker/build-push-action@v3
        if: ${{ !contains(fromJson('["development", "staging", "production"]'), github.ref_name) }}
        id: push_build_tag
        with:
          context: .
          push: true
          tags: ${{ steps.tag.outputs.image_tag_build }}-${{ matrix.container }}
          file: ${{ matrix.container == 'php' && 'Dockerfile' || 'Dockerfile.nginx' }}

      - name: "Build and export to Docker (Environment Based)"
        uses: docker/build-push-action@v3
        if: contains(fromJson('["development", "staging", "production"]'), github.ref_name)
        id: push_build_and_env_tag
        with:
          context: .
          push: true
          tags: |
            ${{ steps.tag.outputs.image_tag_build }}-${{ matrix.container}}
            ${{ steps.tag.outputs.image_tag_branch }}-${{ matrix.container}}
          file: ${{ matrix.container == 'php' && 'Dockerfile' || 'Dockerfile.nginx' }}

  notify_build:
    name: "Notify Build"
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: [ build ]
    continue-on-error: true
    steps:
      # https://github.com/slackapi/slack-github-action/issues/82
      - name: "Prepare"
        id: slack-prepare
        run: |
          COMMIT_MESSAGE='${{ github.event.head_commit.message }}'
          COMMIT_MESSAGE="$(echo "$COMMIT_MESSAGE" | sed -z 's/\n/\\n/g')"
          echo "::set-output name=commit-message::${COMMIT_MESSAGE}"
      - name: "Build Notification"
        id: slack
        uses: slackapi/slack-github-action@v1.19.0
        with:
          channel-id: 'G3184HDT6' # CICD
          payload: |
            {
              "attachments": [
                {
                  "color": "${{ needs.build.result == 'success' && '#2eb886' || '#a30200' }}",
                  "blocks": [
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "*${{ needs.build.result == 'success' && 'Build Success' || 'Build Failure' }}: ${{github.event.repository.name}}*"
                      }
                    },
                    { "type": "divider" },
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "Build <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|#${{ github.run_number }}> by ${{github.actor}} ${{ needs.build.result == 'success' && 'successful' || 'failed' }}! ${{ needs.build.result == 'success' && ':ok_hand:' || ':scream::cry:' }}\n\nCommit Message:\n${{ steps.slack-prepare.outputs.commit-message }}"
                      },
                      "accessory": {
                        "type": "image",
                        "image_url": "${{ needs.build.result == 'success' && 'https://styles.redditmedia.com/t5_39983v/styles/communityIcon_nj9g8x1mm3t51.png?width=256&s=957cfecf8859a834aa7d7094a64b791f6f4ec0a0' || 'https://i.pinimg.com/originals/11/a5/57/11a557b9e90647df60af69d865084ec9.jpg' }}",
                        "alt_text": "${{ needs.build.result == 'success' && 'Nice!' || 'Oof.' }}"
                      }
                    },
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": ":github: *Repository*: <${{ github.server_url }}/${{ github.repository}}|${{ github.repository }}>\n:git: *Ref*: ${{ github.ref_name}}\n:1234: *Build Number*: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|#${{ github.run_number }}>\n:docker: *Image Tag*: ${{needs.build.outputs.image_tag_build}}"
                      }
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

  deploy:
    name: "Deploy"
    if: contains(fromJson('["development", "staging", "production"]'), github.ref_name)
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      fail-fast: true
      matrix:
        container: [ "php", "nginx" ]
    steps:

      - name: "Install Kubectl"
        uses: azure/setup-kubectl@v2.0

      # If we're deploying from a non-production branch, configure Kubectl with Dev cluster secrets
      - name: "Kubernetes Auth (Dev AU East)"
        if: ${{ github.ref  != 'refs/heads/production' }}
        run: |
          kubectl config set-credentials default --token=${{ secrets.DEVELOPMENT_AU_EAST_AKS_TOKEN }}
          # If cert provided...
          # kubectl config set-cluster default --server=${{ secrets.DEVELOPMENT_AU_EAST_AKS_SERVER }} --certificate-authority=ca.crt
          # If cert not provided
          kubectl config set-cluster default --server=${{ secrets.DEVELOPMENT_AU_EAST_AKS_SERVER }} --insecure-skip-tls-verify=true
          kubectl config set-context default --cluster=default --user=default
          kubectl config use-context default

      # If we're deploying from a production branch, configure Kubectl with Prod cluster secrets
      - name: "Kubernetes Auth (Prod AU East)"
        if: ${{ github.ref == 'refs/heads/production' }}
        run: |
          kubectl config set-credentials default --token=${{ secrets.PRODUCTION_AU_EAST_AKS_TOKEN }}
          # If cert provided...
          # kubectl config set-cluster default --server=${{ secrets.PRODUCTION_AU_EAST_AKS_SERVER }} --certificate-authority=ca.crt
          # If cert not provided
          kubectl config set-cluster default --server=${{ secrets.PRODUCTION_AU_EAST_AKS_SERVER }} --insecure-skip-tls-verify=true
          kubectl config set-context default --cluster=default --user=default
          kubectl config use-context default

      - name: "Kubectl Version"
        run: kubectl version

      # Deploy specific container revision based on workflow inputs
      - name: "Kubernetes Deploy"
        env:
          CONTAINER: ${{ inputs.CONTAINER }}-${{ matrix.container }}
          DEPLOYMENT: ${{ inputs.DEPLOYMENT }}
          NAMESPACE: ${{ github.ref_name }}
          IMAGE: ${{ needs.build.outputs.image_tag_build }}-${{ matrix.container }}
        run: |
          echo "Updating $CONTAINER in $DEPLOYMENT to $IMAGE in the $NAMESPACE namespace."
          kubectl set image deployment/$DEPLOYMENT  $CONTAINER=$IMAGE --record=true --namespace=${NAMESPACE}

  notify_deploy:
    name: "Notify Deploy"
    runs-on: ubuntu-latest
    if: always() && needs.deploy.result != 'skipped'
    needs: [ deploy ]
    steps:
      - name: "Deployment Notification"
        id: slack
        uses: slackapi/slack-github-action@v1.19.0
        with:
          channel-id: 'G3184HDT6' # CICD
          payload: |
            {
              "attachments": [
                {
                  "color": "${{ needs.deploy.result == 'success' && '#2eb886' || '#a30200' }}",
                  "blocks": [
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "*${{ needs.deploy.result == 'success' && 'Deployment Success' || 'Deployment Failure' }}: ${{github.event.repository.name}}*"
                      }
                    },
                    { "type": "divider" },
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "Deployment <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|#${{ github.run_number }}> of image ${{needs.build.outputs.image_tag_build}} to *${{github.ref_name}}* ${{ needs.deploy.result == 'success' && 'successful' || 'failed' }}! ${{ needs.deploy.result == 'success' && ':kubernetes::100::peepo_clap:' || ':scream::pepetrashscared:' }}"
                      }
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
