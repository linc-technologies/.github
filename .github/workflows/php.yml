name: "PHP"

on:
  workflow_dispatch:
  workflow_call:

env:
  CONTAINER_REGISTRY: linced.azurecr.io/linc-ed

jobs:
  build:
    name: "Build"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        container: ["php", "nginx"]
    steps:

      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Login to ACR"
        uses: docker/login-action@v2
        with:
          registry: linced.azurecr.io
          username: ${{ secrets.AZURE_ACR_LINCED_USERNAME }}
          password: ${{ secrets.AZURE_ACR_LINCED_PASSWORD }}

      - name: "Set up Docker Buildx"
        uses: docker/setup-buildx-action@v2

      - name: "Export build tag"
        id: tag
        env:
          BUILD: ${{ github.run_number }}
        run: |
          echo "::set-output name=build_num::$(($BUILD+10000))"
          echo "::set-output name=image_tag_build::${{env.CONTAINER_REGISTRY}}/${{ github.event.repository.name }}-${{matrix.container}}:$(($BUILD+10000))"
          echo "::set-output name=image_tag_branch::${{env.CONTAINER_REGISTRY}}/${{ github.event.repository.name }}-${{matrix.container}}:${{github.ref_name}}"

      - name: "Build and export to Docker"
        uses: docker/build-push-action@v3
        if: ${{ !contains(fromJson('["development", "staging", "production"]'), github.ref_name) }}
        id: push_build_tag
        with:
          context: .
          push: false
          tags: ${{ steps.tag.outputs.image_tag_build }}
          file: ${{ matrix.container == 'php' && 'Dockerfile' || 'Dockerfile.nginx' }}

      - name: "Build and export to Docker (Environment Based)"
        uses: docker/build-push-action@v3
        if: contains(fromJson('["development", "staging", "production"]'), github.ref_name)
        id: push_build_and_env_tag
        with:
          context: .
          push: true
          tags: |
            ${{ steps.tag.outputs.image_tag_build }}
            ${{ steps.tag.outputs.image_tag_branch }}
          file: ${{ matrix.container == 'php' && 'Dockerfile' || 'Dockerfile.nginx' }}

      - name: "Slack Notify"
        if: success() || failure()
        uses: linc-technologies/.github/.github/actions/slack_notify@master
        with:
          event: build
          success: ${{ !contains(steps.*.outcome, 'failure') }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy:
    name: "Deploy"
    if: contains(fromJson('["development", "staging", "production"]'), github.ref_name)
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      fail-fast: true
      matrix:
        container: [ "php", "nginx" ]
    steps:

      - name: "Install Kubectl"
        uses: azure/setup-kubectl@v2.0
        with:
          version: 'v1.22.6'

      # Export the build tag in the deployment stage as well as build because it's difficult to reconcile the image
      # build tag from build.matrix1.output vs build.matrix2.output.
      - name: "Export build tag"
        id: tag
        env:
          BUILD: ${{ github.run_number }}
        run: |
          echo "::set-output name=build_num::$(($BUILD+10000))"
          echo "::set-output name=image_tag_build::${{env.CONTAINER_REGISTRY}}/${{ github.event.repository.name }}-${{matrix.container}}:$(($BUILD+10000))"
          echo "::set-output name=image_tag_branch::${{env.CONTAINER_REGISTRY}}/${{ github.event.repository.name }}-${{matrix.container}}:${{github.ref_name}}"

      # If we're deploying from a non-production branch, configure Kubectl with Dev cluster secrets
      - name: "Kubernetes Auth (Dev AU East)"
        if: ${{ github.ref  != 'refs/heads/production' }}
        run: |
          kubectl config set-credentials default --token=${{ secrets.DEVELOPMENT_AU_EAST_AKS_TOKEN }}
          # If cert provided...
          # kubectl config set-cluster default --server=${{ secrets.DEVELOPMENT_AU_EAST_AKS_SERVER }} --certificate-authority=ca.crt
          # If cert not provided
          kubectl config set-cluster default --server=${{ secrets.DEVELOPMENT_AU_EAST_AKS_SERVER }} --insecure-skip-tls-verify=true
          kubectl config set-context default --cluster=default --user=default
          kubectl config use-context default

      # If we're deploying from a production branch, configure Kubectl with Prod cluster secrets
      - name: "Kubernetes Auth (Prod AU East)"
        if: ${{ github.ref == 'refs/heads/production' }}
        run: |
          kubectl config set-credentials default --token=${{ secrets.PRODUCTION_AU_EAST_AKS_TOKEN }}
          # If cert provided...
          # kubectl config set-cluster default --server=${{ secrets.PRODUCTION_AU_EAST_AKS_SERVER }} --certificate-authority=ca.crt
          # If cert not provided
          kubectl config set-cluster default --server=${{ secrets.PRODUCTION_AU_EAST_AKS_SERVER }} --insecure-skip-tls-verify=true
          kubectl config set-context default --cluster=default --user=default
          kubectl config use-context default

      - name: "Kubectl Version"
        run: kubectl version

      # Deploy specific container revision based on workflow inputs
      - name: "Kubernetes Deploy"
        env:
          CONTAINER: ${{ inputs.CONTAINER }}-${{ matrix.container }}
          DEPLOYMENT: ${{ inputs.DEPLOYMENT }}
          NAMESPACE: ${{ github.ref_name }}
          IMAGE: ${{ steps.tag.outputs.image_tag_build }}
        run: |
          echo "Updating $CONTAINER in $DEPLOYMENT to $IMAGE in the $NAMESPACE namespace."
          kubectl set image deployment/$DEPLOYMENT  $CONTAINER=$IMAGE --record=true --namespace=${NAMESPACE}

      - name: "Slack Notify"
        if: success() || failure()
        uses: linc-technologies/.github/.github/actions/slack_notify@master
        with:
          event: deploy
          success: ${{ !contains(steps.*.outcome, 'failure') }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
