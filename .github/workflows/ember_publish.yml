name: "Package"

on:
  workflow_call:
    inputs:
      backport:
        type: boolean
        default: false
        required: false
        description: "Whether this release is a backport."
      node_version:
        default: "12.22"
        type: string
        required: false
        description: 'The version of node to configure and use.'
      prerelease:
        type: boolean
        default: false
        required: false
        description: |
          Whether this release is a prerelease. If true, then the npm publish command will have the prerelease tag
          passed in in order to override it being tagged as `latest`."
          https://gist.github.com/tfennelly/f1d573d935f4e9e9b4d1ee1b0ab6c04c
      public:
        type: boolean
        default: false
        required: false
        description: |
          Whether the package should be published to the public NPM registry as well.
    secrets:
      npm_token:
        required: true
        description: 'The token to use to publish .'

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      NODE_AUTH_TOKEN: ${{github.token}}
      NPM_REGISTRY_TOKEN: ${{ secrets.npm_token }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Setup Node ${{ inputs.node_version }}"
        id: setup_node_yarn
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          cache: 'yarn'
          cache-dependency-path: yarn.lock
          registry-url: "https://npm.pkg.github.com"

      - name: "Install Dependencies"
        id: install_dependencies_yarn
        run: yarn run ci

      - name: "Publish Pre-release (github packages)"
        id: publish_prerelease_yarn
        if: ${{ inputs.prerelease == 'true' }}
        run: |
          TAG=$(cat package.json | jq '.version' | sed -e 's/".*-\(.*\)"/\1/g')
          yarn publish --tag=$TAG

      - name: "Publish Pre-release (npm)"
        id: publish_prerelease_npm
        if: ${{ inputs.public == 'true' && inputs.prerelease == 'true' }}
        run: |
          TAG=$(cat package.json | jq '.version' | sed -e 's/".*-\(.*\)"/\1/g')
          npm set "//registry.npmjs.org/:_authToken=${NPM_REGISTRY_TOKEN}"
          npm publish --tag=$TAG --access public --ignore-scripts --@linc-technologies:registry='https://registry.npmjs.org'

      - name: "Publish Backport (github packages)"
        id: publish_backport_yarn
        if: ${{ inputs.backport == 'true' }}
        run: |
          TAG=$(cat package.json| jq -r .version)
          yarn publish --new-version=$TAG

      - name: "Publish Backport (npm)"
        id: publish_backport_npm
        if: ${{ inputs.public == 'true' && inputs.backport == 'true' }}
        run: |
          TAG=$(cat package.json| jq -r .version)
          npm set "//registry.npmjs.org/:_authToken=${NPM_REGISTRY_TOKEN}"
          npm publish --new-version=$TAG --access public --ignore-scripts --@linc-technologies:registry='https://registry.npmjs.org'

      - name: "Publish (github packages)"
        id: publish_yarn
        if: ${{ steps.publish_prerelease_yarn.outcome == 'skipped' && steps.publish_backport_yarn.outcome == 'skipped' }}
        run: |
          yarn publish
          npm set "//registry.npmjs.org/:_authToken=${NPM_REGISTRY_TOKEN}"
          npm publish --access public --ignore-scripts --@linc-technologies:registry='https://registry.npmjs.org'

      - name: "Publish (npm)"
        id: publish_npm
        if: ${{ inputs.public == 'true' && steps.publish_prerelease_yarn.outcome == 'skipped' && steps.publish_backport_yarn.outcome == 'skipped' }}
        run: |
          npm set "//registry.npmjs.org/:_authToken=${NPM_REGISTRY_TOKEN}"
          npm publish --access public --ignore-scripts --@linc-technologies:registry='https://registry.npmjs.org'
