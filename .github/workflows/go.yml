name: "Go"

on:
  workflow_dispatch:
  workflow_call:


# TODO: Complete these
# GoLang steps:
# ✅       cachePrime,
# ✅       cacheRestore,
# ✅       ciDep,
# ✅       ciTest,
# ✅       slackUnitTests,
# ✅       compile,
# ✅       cacheRebuild,
# ✅       dockerBuild,
# ✅       slackBuild,
# ❌       deployKubernetes,
# ❌       deployHelm,
# ❌       slackDeploy,

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  # The "build" workflow
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Setup Go
      # TODO: Ensure that this caches the .gomod and .gocache folders
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.18' # The Go version to download (if necessary) and use.
#          check-latest: true
          cache: true
#          cache-dependency-path: subdir/go.sum # optional

      # Install all the dependencies
      - name: Install dependencies
        env:
          GOPRIVATE: bitbucket.org
        run: |
          go version
          go get -u golang.org/x/lint/golint

      # Debug repo name
      - name: Debug
        run: |
          env | grep -i GITHUB

      # Run build of the application
      - name: Run build
        env:
          GOPRIVATE: bitbucket.org
        run: |
          cd ./cmd/*/
          go build -tags development -ldflags="-s -w" -v

# TODO: Change this to CD to a valid directory, ensure it will not cause widespread breaks
#      # Run vet & lint on the code
#      - name: Run vet & lint
#        run: |
#          go vet .
#          golint .

      # Test code expects to access mongo @ `mongo` per previous build system
      - name: Mongo Hostname
        run:
          sudo echo "127.0.0.1 mongo" | sudo tee -a /etc/hosts

      # Start a Mongo DB server for testing
      - name: Start MongoDB
        uses: supercharge/mongodb-github-action@1.7.0
        with:
          mongodb-version: '4.4'

      # Run testing on the code
      - name: Run testing
        run: go test -vet=off -tags internal -v ./...

      - uses: linc-technologies/.github/.github/workflows/_slack.yml@master
        with:
          type: "build"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to ACR
        uses: docker/login-action@v2
        with:
          registry: linced.azurecr.io
          username: ${{ secrets.AZURE_ACR_LINCED_USERNAME }}
          password: ${{ secrets.AZURE_ACR_LINCED_PASSWORD }}

      - name: Build and export to Docker
        uses: docker/build-push-action@v3
        with:
          context: .
          load: true
          push: false
          tags: ${{ env.GITHUB_RUN_NUMBER }}
          file: Dockerfile.drone

  deploy:
    uses: linc-technologies/.github/.github/workflows/_kubernetes.yml@master
    secrets: inherit
    with:
      kubernetes_namespace: github.ref_name
      kubernetes_deployment:
      container_tag:
      container_name:

  deployment_notification:
    uses: linc-technologies/.github/.github/workflows/_slack.yml@master
    secrets: inherit
    with:
      type: "deploy"
