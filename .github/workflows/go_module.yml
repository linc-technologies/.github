name: "Go Module"

on:
  workflow_dispatch:
  workflow_call:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # The "build" workflow
  build:
    name: "Build"
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Setup Go
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.17' # The Go version to download (if necessary) and use.
          cache: true

      # Perform a key-scan of 'bitbucket.org' and register the output for the SSH key step below
      - name: BitBucket Keyscan
        id: scan
        run: echo "::set-output name=known_hosts::$(ssh-keyscan -t rsa bitbucket.org)"

      # Install an SSH key for BitBucket authentication
      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.BITBUCKET_SSH_KEY }}
          name: id_rsa
          known_hosts: ${{ steps.scan.outputs.known_hosts }}
          if_key_exists: replace

      # Issue an HTTPS -> Git override for BitBucket and GitHub repositories
      - name: Git Config
        run: |
          git config --global url."git@bitbucket.org:".insteadOf "https://bitbucket.org"          
          git config --global url."git@github.com:".insteadOf "https://github.com"          

      # Install all the dependencies
      - name: Install dependencies
        env:
          GOPRIVATE: github.com/linc-technologies
        run: |
          go version
          go get -u golang.org/x/lint/golint

# TODO: Change this to CD to a valid directory, ensure it will not cause widespread breaks
#      # Run vet & lint on the code
#      - name: Run vet & lint
#        run: |
#          go vet .
#          golint .

      # Test code expects to access services @ `mongo` / `mysql` per previous build system
      - name: Service Hostnames
        run: |
          sudo echo "127.0.0.1 mongo" | sudo tee -a /etc/hosts
          sudo echo "127.0.0.1 mysql" | sudo tee -a /etc/hosts

      # Start a Mongo DB server for testing
      - name: Start MongoDB
        uses: supercharge/mongodb-github-action@1.7.0
        with:
          mongodb-version: '4.4'

      # Run testing on the code
      - name: Run testing
        run: go test -vet=off -tags internal -v ./...

  notify_build:
    name: "Notify Build"
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: [ build ]
    steps:
      # https://github.com/slackapi/slack-github-action/issues/82
      - name: "Prepare"
        id: slack-prepare
        run: |
          COMMIT_MESSAGE='${{ github.event.head_commit.message }}'
          COMMIT_MESSAGE="$(echo "$COMMIT_MESSAGE" | sed -z 's/\n/\\n/g')"
          echo "::set-output name=commit-message::${COMMIT_MESSAGE}"
      - name: "Build Notification"
        id: slack
        uses: slackapi/slack-github-action@v1.19.0
        with:
          channel-id: 'G3184HDT6' # CICD
          payload: |
            {
              "attachments": [
                {
                  "color": "${{ needs.build.result == 'success' && '#2eb886' || '#a30200' }}",
                  "blocks": [
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "*${{ needs.build.result == 'success' && 'Build Success' || 'Build Failure' }}: ${{github.event.repository.name}}*"
                      }
                    },
                    { "type": "divider" },
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "Build <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|#${{ github.run_number }}> by ${{github.actor}} ${{ needs.build.result == 'success' && 'successful' || 'failed' }}! ${{ needs.build.result == 'success' && ':ok_hand:' || ':scream::cry:' }}\n\nCommit Message:\n${{ steps.slack-prepare.outputs.commit-message }}"
                      },
                      "accessory": {
                        "type": "image",
                        "image_url": "${{ needs.build.result == 'success' && 'https://styles.redditmedia.com/t5_39983v/styles/communityIcon_nj9g8x1mm3t51.png?width=256&s=957cfecf8859a834aa7d7094a64b791f6f4ec0a0' || 'https://i.pinimg.com/originals/11/a5/57/11a557b9e90647df60af69d865084ec9.jpg' }}",
                        "alt_text": "${{ needs.build.result == 'success' && 'Nice!' || 'Oof.' }}"
                      }
                    },
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": ":github: *Repository*: <${{ github.server_url }}/${{ github.repository}}|${{ github.repository }}>\n:git: *Ref*: ${{ github.ref_name}}\n:1234: *Build Number*: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|#${{ github.run_number }}>\n:docker: *Image Tag*: ${{needs.build.outputs.image_tag_build}}"
                      }
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
