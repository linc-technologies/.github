name: "Go Module"

on:
  workflow_dispatch:
  workflow_call:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # The "build" workflow
  build:
    name: "Build"
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Setup Go
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.17' # The Go version to download (if necessary) and use.
          cache: true

      # Perform a key-scan of 'bitbucket.org' and register the output for the SSH key step below
      - name: BitBucket Keyscan
        id: scan
        run: echo "::set-output name=known_hosts::$(ssh-keyscan -t rsa bitbucket.org)"

      # Install an SSH key for BitBucket authentication
      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.BITBUCKET_SSH_KEY }}
          name: id_rsa
          known_hosts: ${{ steps.scan.outputs.known_hosts }}
          if_key_exists: replace

      # Issue an HTTPS -> Git override for BitBucket and GitHub repositories
      - name: Git Config
        run: |
          git config --global url."git@bitbucket.org:".insteadOf "https://bitbucket.org"          
          git config --global url."git@github.com:".insteadOf "https://github.com"          

      # Install all the dependencies
      - name: Install dependencies
        env:
          GOPRIVATE: github.com
        run: |
          go version
          go get -u golang.org/x/lint/golint

# TODO: Change this to CD to a valid directory, ensure it will not cause widespread breaks
#      # Run vet & lint on the code
#      - name: Run vet & lint
#        run: |
#          go vet .
#          golint .

      # Test code expects to access mongo @ `mongo` per previous build system
      - name: Mongo Hostname
        run:
          sudo echo "127.0.0.1 mongo" | sudo tee -a /etc/hosts

      # Start a Mongo DB server for testing
      - name: Start MongoDB
        uses: supercharge/mongodb-github-action@1.7.0
        with:
          mongodb-version: '4.4'

      # Run testing on the code
      - name: Run testing
        run: go test -vet=off -tags internal -v ./...

  notify_build:
    name: "Notify Build"
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Deployment Notification
        if: always()
        id: slack
        uses: slackapi/slack-github-action@v1.19.0
        with:
          channel-id: 'G3184HDT6' # CICD
          # For posting a rich message using Block Kit
          payload: |
            {
              "text": "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK